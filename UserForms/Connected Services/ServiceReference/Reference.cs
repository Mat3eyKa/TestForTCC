//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/UserForms.Models")]
    public partial class Person : object
    {
        
        private string AddressField;
        
        private string CityField;
        
        private string DateOfBirthField;
        
        private int HouseField;
        
        private int IdField;
        
        private string NameField;
        
        private string PatronymicField;
        
        private int PhoneField;
        
        private System.Nullable<int> RoomField;
        
        private string StreetField;
        
        private string SurnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City
        {
            get
            {
                return this.CityField;
            }
            set
            {
                this.CityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateOfBirth
        {
            get
            {
                return this.DateOfBirthField;
            }
            set
            {
                this.DateOfBirthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int House
        {
            get
            {
                return this.HouseField;
            }
            set
            {
                this.HouseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Patronymic
        {
            get
            {
                return this.PatronymicField;
            }
            set
            {
                this.PatronymicField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Phone
        {
            get
            {
                return this.PhoneField;
            }
            set
            {
                this.PhoneField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Room
        {
            get
            {
                return this.RoomField;
            }
            set
            {
                this.RoomField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street
        {
            get
            {
                return this.StreetField;
            }
            set
            {
                this.StreetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname
        {
            get
            {
                return this.SurnameField;
            }
            set
            {
                this.SurnameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceChat")]
    public interface IServiceChat
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetPersons", ReplyAction="http://tempuri.org/IServiceChat/GetPersonsResponse")]
        System.Threading.Tasks.Task<ServiceReference.Person[]> GetPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GeteSerchedPersons", ReplyAction="http://tempuri.org/IServiceChat/GeteSerchedPersonsResponse")]
        System.Threading.Tasks.Task<ServiceReference.Person[]> GeteSerchedPersonsAsync(string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Create", ReplyAction="http://tempuri.org/IServiceChat/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Update", ReplyAction="http://tempuri.org/IServiceChat/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string id, string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Detele", ReplyAction="http://tempuri.org/IServiceChat/DeteleResponse")]
        System.Threading.Tasks.Task DeteleAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IServiceChatChannel : ServiceReference.IServiceChat, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceChatClient : System.ServiceModel.ClientBase<ServiceReference.IServiceChat>, ServiceReference.IServiceChat
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceChatClient() : 
                base(ServiceChatClient.GetDefaultBinding(), ServiceChatClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IServiceChat.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceChatClient.GetBindingForEndpoint(endpointConfiguration), ServiceChatClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceChatClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceChatClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.Person[]> GetPersonsAsync()
        {
            return base.Channel.GetPersonsAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference.Person[]> GeteSerchedPersonsAsync(string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room)
        {
            return base.Channel.GeteSerchedPersonsAsync(name, surname, patronymic, dateOfBirth, phone, city, street, house, room);
        }
        
        public System.Threading.Tasks.Task CreateAsync(string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room)
        {
            return base.Channel.CreateAsync(name, surname, patronymic, dateOfBirth, phone, city, street, house, room);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string id, string name, string surname, string patronymic, string dateOfBirth, string phone, string city, string street, string house, string room)
        {
            return base.Channel.UpdateAsync(id, name, surname, patronymic, dateOfBirth, phone, city, street, house, room);
        }
        
        public System.Threading.Tasks.Task DeteleAsync(int id)
        {
            return base.Channel.DeteleAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServiceChat))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServiceChat))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8302/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceChatClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IServiceChat);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceChatClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IServiceChat);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IServiceChat,
        }
    }
}
